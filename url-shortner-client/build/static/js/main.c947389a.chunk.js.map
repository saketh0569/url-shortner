{"version":3,"sources":["header.jsx","thetable.jsx","gettinglink.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","Thetable","useState","urls","seturl","useEffect","axios","get","then","res","data","reverse","Table","striped","bordered","hover","map","item","ind","redirectlink","new","red","old","href","count","qs","require","Gettinglink","newmyurl","settheurl","enteredUrl","setEnteredUrl","Form","onSubmit","event","preventDefault","Group","Control","size","type","placeholder","onChange","target","value","Button","variant","onClick","post","stringify","url","headers","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qQAEe,SAASA,IACvB,OACC,yBAAKC,UAAU,UACd,6C,yDCAY,SAASC,IAAY,IAAD,EACXC,mBAAS,IADE,mBAC3BC,EAD2B,KACrBC,EADqB,KASlC,OANAC,qBAAU,WACTC,IAAMC,IAAI,gCAAgCC,MAAK,SAAAC,GAC9CL,EAAOK,EAAIC,KAAKC,gBAEf,CAACR,IAGH,6BACC,kBAACS,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC5B,+BACC,4BACC,iCACA,uCACA,uCACA,wCAGF,+BACEZ,EAAKa,KAAI,SAACC,EAAMC,GAChB,IAAMC,EACL,+BAAiCF,EAAKG,IACjCC,EACL,uBAAyBJ,EAAKG,IAC/B,OACC,4BACC,gCAAMF,EAAM,GACZ,gCAAMD,EAAKK,IAAX,KACA,4BACC,uBAAGC,KAAMJ,GAAeE,IAEzB,gCAAMJ,EAAKO,c,mBC/BbC,EAAKC,EAAQ,IACJ,SAASC,IAAe,IAAD,IACPzB,mBAAS,GADF,mBAC9B0B,EAD8B,KACpBC,EADoB,OAED3B,mBAAS,IAFR,mBAE9B4B,EAF8B,KAElBC,EAFkB,KA6BrC,OACC,6BACC,kBAACC,EAAA,EAAD,CAAMC,SANR,SAAiBC,GAChBA,EAAMC,mBAMJ,kBAACH,EAAA,EAAKI,MAAN,CAAYpC,UAAU,SACrB,kBAACgC,EAAA,EAAKK,SAAN,GACCC,KAAK,KACLC,KAAK,OACLC,YAAY,aACZC,SAhBL,SAAsBP,GACrBH,EAAcG,EAAMQ,OAAOC,QAgBvBA,MAAOb,GALR,qBAMM,QANN,4BAOa,sBAPb,IAUA,kBAACc,EAAA,EAAD,CAAQC,QAAQ,UAAUN,KAAK,SAASO,QAvC5C,WAMCxC,IACEyC,KACA,mCACAtB,EAAGuB,UAAU,CAAEC,IAAKnB,IARP,CACdoB,QAAS,CACR,eAAgB,uCAShB1C,MAAK,SAAAC,GAAG,OACRoB,EAAU,uBAAyBpB,EAAIC,WA0BtC,YAIa,GAAZkB,GACA,4BACC,uBAAGL,KAAM,WAAaK,GAAWA,MAMrC,kBAAC3B,EAAD,OChDYkD,MATf,WACC,OACC,yBAAKnD,UAAU,OACd,kBAACD,EAAD,MACA,kBAAC4B,EAAD,QCEiByB,QACU,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCZFC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHpB,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBxD,MAAK,SAAAyD,GACLA,EAAaC,gBAEbC,OAAM,SAAAC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c947389a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Header() {\n\treturn (\n\t\t<div className=\"header\">\n\t\t\t<h1>URL SHORTNER</h1>\n\t\t</div>\n\t);\n}","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Table from \"react-bootstrap/Table\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default function Thetable() {\n\tconst [urls, seturl] = useState([]);\n\n\tuseEffect(() => {\n\t\taxios.get(\"https://ul-sh.herokuapp.com/\").then(res => {\n\t\t\tseturl(res.data.reverse());\n\t\t});\n\t}, [urls]);\n\n\treturn (\n\t\t<div>\n\t\t\t<Table striped bordered hover>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>#</th>\n\t\t\t\t\t\t<th>OLD URL</th>\n\t\t\t\t\t\t<th>NEW URL</th>\n\t\t\t\t\t\t<th>Clicks</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{urls.map((item, ind) => {\n\t\t\t\t\t\tconst redirectlink =\n\t\t\t\t\t\t\t\"https://ul-sh.herokuapp.com/\" + item.new;\n\t\t\t\t\t\tconst red =\n\t\t\t\t\t\t\t\"ul-sh.herokuapp.com/\" + item.new;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td> {ind + 1}</td>\n\t\t\t\t\t\t\t\t<td> {item.old} </td>\n\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t<a href={redirectlink}>{red}</a>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td> {item.count}</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</tbody>\n\t\t\t</Table>\n\t\t</div>\n\t);\n}\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Thetable from \"./thetable\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nconst qs = require(\"querystring\");\nexport default function Gettinglink() {\n\tconst [newmyurl, settheurl] = useState(0);\n\tconst [enteredUrl, setEnteredUrl] = useState(\"\");\n\n\tfunction addnewurl() {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded\"\n\t\t\t}\n\t\t};\n\t\taxios\n\t\t\t.post(\n\t\t\t\t\"https://ul-sh.herokuapp.com/link\",\n\t\t\t\tqs.stringify({ url: enteredUrl }),\n\t\t\t\tconfig\n\t\t\t)\n\t\t\t.then(res =>\n\t\t\t\tsettheurl(\"ul-sh.herokuapp.com/\" + res.data)\n\t\t\t);\n\t}\n\n\tfunction handleChange(event) {\n\t\tsetEnteredUrl(event.target.value);\n\t}\n\n\tfunction formfun(event) {\n\t\tevent.preventDefault();\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Form onSubmit={formfun}>\n\t\t\t\t<Form.Group className=\"forms\">\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Large text\"\n\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\tvalue={enteredUrl}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"PAST THE LINK HERE\"\n\t\t\t\t\t/>\n\n\t\t\t\t\t<Button variant=\"primary\" type=\"submit\" onClick={addnewurl}>\n\t\t\t\t\t\tGET LINK\n\t\t\t\t\t</Button>\n\n\t\t\t\t\t{newmyurl != 0 && (\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t<a href={\"https://\" + newmyurl}>{newmyurl}</a>\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t)}\n\t\t\t\t</Form.Group>\n\t\t\t</Form>\n\n\t\t\t<Thetable />\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport Header from \"./header\"\nimport './App.css';\nimport Gettinglink from \"./gettinglink\"\n\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header />\n\t\t\t<Gettinglink />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}